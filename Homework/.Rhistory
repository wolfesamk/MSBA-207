pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/ct
ccost <- avgi*(ch*(1-(d/c)))
tc <- setc+ccost
return(data.frame('Current Costs'=round(tc,0), 'Runs Per Year'=round(setc,0),
'Cycle Time'=round(ccost,0)))}
calculate_eoq(d=6000, c=16000, ch=20, s=2345, p=500)
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/ct
ccost <- avgi*(ch*((1-d)/c))
tc <- setc+ccost
return(data.frame('Current Costs'=round(tc,0), 'Runs Per Year'=round(setc,0),
'Cycle Time'=round(ccost,0)))}
calculate_eoq(d=6000, c=16000, ch=20, s=2345, p=500)
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/ct
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc <- setc+ccost
return(data.frame('Current Costs'=round(tc,0), 'Runs Per Year'=round(avgi,0),
'Cycle Time'=round(bot,0)))}
calculate_eoq(d=6000, c=16000, ch=20, s=2345, p=500)
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc <- setc+ccost
return(data.frame('Current Costs'=round(tc,0), 'Runs Per Year'=round(avgi,0),
'Cycle Time'=round(bot,0)))}
calculate_eoq(d=6000, c=16000, ch=20, s=2345, p=500)
return(data.frame('Current Costs'=round(tc,0), 'Runs Per Year'=round(avgi,0),
'Cycle Time'=round(ccost,0)))}
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc <- setc+ccost
return(data.frame('Current Costs'=round(tc,0), 'Runs Per Year'=round(avgi,0),
'Cycle Time'=round(ccost,0)))}
calculate_eoq(d=6000, c=16000, ch=20, s=2345, p=500)
return(data.frame('Current Costs'=round(tc,0), 'Runs Per Year'=round(avgi,0),
'Cycle Time'=round(tc,0)))}
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc <- setc+ccost
return(data.frame('Current Costs'=round(tc,0), 'Runs Per Year'=round(avgi,0),
'Cycle Time'=round(tc,0)))}
calculate_eoq(d=6000, c=16000, ch=20, s=2345, p=500)
#Question 27
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
return(data.frame('Optimum Lot Size'=round(q,0), 'Runs Per Year'=round(pr,0),
'Cycle Time'=round(ct,0)))}
calculate_eoq(d=27000, c=36000, ch=24, s=2395, p=2250)
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc1 <- setc+ccost
setc <- (d/q)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc2 <- setc+ccost
return(data.frame('Current Costs'=round(tc1,0), 'Runs Per Year'=round(tc2,0),
'Cycle Time'=round(tc2,0)))}
calculate_eoq(d=6000, c=16000, ch=20, s=2345, p=500)
calculate_eoq(d=27000, c=36000, ch=24, s=2395, p=2250)
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc1 <- setc+ccost
setc <- (d/q)*s
avgi <- p/ct
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc2 <- setc+ccost
return(data.frame('Current Costs'=round(tc1,0), 'Runs Per Year'=round(tc2,0),
'Cycle Time'=round(tc2,0)))}
calculate_eoq(d=27000, c=36000, ch=24, s=2395, p=2250)
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc1 <- setc+ccost
setc <- (d/q)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc2 <- setc+ccost
return(data.frame('Current Costs'=round(tc1,0), 'Proposed'=round(tc2,0),
'Difference'=round(tc1-tc2,0)))}
calculate_eoq(d=27000, c=36000, ch=24, s=2395, p=2250)
#Question 27
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
return(data.frame('Optimum Lot Size'=round(q,0), 'Runs Per Year'=round(pr,0),
'Cycle Time'=round(ct,0)))}
calculate_eoq(d=27000, c=36000, ch=24, s=2395, p=2250)
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc1 <- setc+ccost
setc <- (d/4643)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc2 <- setc+ccost
return(data.frame('Current Costs'=round(tc1,0), 'Proposed'=round(tc2,0),
'Difference'=round(tc1-tc2,0)))}
calculate_eoq(d=27000, c=36000, ch=24, s=2395, p=2250)
#Question 27
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
return(data.frame('Optimum Lot Size'=round(q,0), 'Runs Per Year'=round(pr,0),
'Cycle Time'=round(ct,0)))}
calculate_eoq(d=6000, c=16000, ch=20, s=2345, p=500)
calculate_eoq(d=27000, c=36000, ch=24, s=2395, p=2250)
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc1 <- setc+ccost
setc <- (d/4643)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc2 <- setc+ccost
return(data.frame('Current Costs'=round(tc1,0), 'Proposed'=round(tc2,0),
'Difference'=round(tc1-tc2,0)))}
calculate_eoq(d=6000, c=16000, ch=20, s=2345, p=500)
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc1 <- setc+ccost
setc <- (d/p)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc2 <- setc+ccost
return(data.frame('Current Costs'=round(tc1,0), 'Proposed'=round(tc2,0),
'Difference'=round(tc1-tc2,0)))}
calculate_eoq(d=6000, c=16000, ch=20, s=2345, p=500)
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc1 <- setc+ccost
setc <- (d/q)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc2 <- setc+ccost
return(data.frame('Current Costs'=round(tc1,0), 'Proposed'=round(tc2,0),
'Difference'=round(tc1-tc2,0)))}
calculate_eoq(d=6000, c=16000, ch=20, s=2345, p=500)
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc1 <- setc+ccost
setc <- (d/q)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc2 <- setc+ccost
return(data.frame('Current Costs'=round(tc1,0), 'Proposed'=round(avgi,0),
'Difference'=round(bot,0)))}
calculate_eoq(d=6000, c=16000, ch=20, s=2345, p=500)
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc1 <- setc+ccost
setc <- (d/q)*s
avgi <- q/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc2 <- setc+ccost
return(data.frame('Current Costs'=round(tc1,0), 'Proposed'=round(avgi,0),
'Difference'=round(bot,0)))}
calculate_eoq(d=6000, c=16000, ch=20, s=2345, p=500)
#Question 28
calculate_eoq <-function(d=annual_demand, c=capacity, s=setup, ch=annual_holding_cost_rate,
p=production){
options(digits=15)
q <- sqrt(((2*d*s)/(ch*(1-(d/c)))))
pr <- d/q
ct <-12/pr
setc <- (d/p)*s
avgi <- p/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc1 <- setc+ccost
setc <- (d/q)*s
avgi <- q/2
bot <- (ch*(1-(d/c)))
ccost <- avgi*bot
tc2 <- setc+ccost
return(data.frame('Current Costs'=round(tc1,0), 'Proposed'=round(tc2,0),
'Difference'=round(tc1-tc2,0)))}
calculate_eoq(d=6000, c=16000, ch=20, s=2345, p=500)
calculate_eoq(d=27000, c=36000, ch=24, s=2395, p=2250)
#Question 29
k <- 3
L <- 7.2
m <- 6
po <- 1 - pnorm(L/m)
Lq <- ((L/m)^k*L*m*po)/(factorial(k-1))*((k*m-L)^2)
l <- Lq+(L/m)
Wq <- Lq/L
W <- (Wq+1)/m
Pw <- (1/factorial(k))*(L/m)^k*((k*m)/((k*m)-L))*po
#Question 29
k <- 3
L <- 7.2
m <- 6
po <- 1 - pnorm(L/m)
Lq <- ((L/m)^k*L*m*po)/(factorial(k-1))*((k*m-L)^2)
l <- Lq+(L/m)
Wq <- Lq/L
W <- (Wq+1)/m
Pw <- (1/factorial(k))*(L/m)^k*((k*m)/((k*m)-L))*po
setwd("E:/Aliit/School/MSBA/207/MSBA-207/Homework")
train_X <- read.csv('ebay_train_X.csv')
train_y <- read.csv('ebay_train_y.csv')
valid_X <- read.csv('ebay_valid_X.csv')
valid_y <- read.csv('ebay_valid_y.csv')
set.seed(123)
install.packages(c("askpass", "bslib", "cpp11", "curl", "cyclocomp", "dbplyr", "DEoptimR", "dplyr", "evaluate", "fontawesome", "ggplot2", "glmnet", "gtable", "htmltools", "httr", "infer", "knitr", "labeling", "languageserver", "lpSolve", "lubridate", "markdown", "modeldata", "openssl", "parsnip", "patchwork", "pkgload", "plyr", "prettyunits", "prodlim", "progressr", "promises", "purrr", "recipes", "rematch", "rmarkdown", "rsample", "shiny", "sp", "styler", "tidymodels", "tinytex", "tune", "uuid", "vroom", "withr", "xfun"))
View(train_X)
train.df <- rbind(train_X,train_y)
train.df <- cbind(train_X,train_y)
valid.df <- cbind(valid_X,valid_y)
View(valid.df)
#Samuel Wolfe
#October 7, 2023
#MSBA 207
#Chapter 10b
libary(glmnet)
#Samuel Wolfe
#October 7, 2023
#MSBA 207
#Chapter 10b
library(glmnet)
train_X <- read.csv('ebay_train_X.csv')
train_y <- read.csv('ebay_train_y.csv')
valid_X <- read.csv('ebay_valid_X.csv')
valid_y <- read.csv('ebay_valid_y.csv')
train.df <- cbind(train_X,train_y)
valid.df <- cbind(valid_X,valid_y)
set.seed(123)
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data = train.df, family = "binomial")
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
round(data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit))), 5)
y <- train.df$Competitive
# creating a matrix with predictors
X <- model.matrix(Competititve ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
View(valid.df)
# creating a matrix with predictors
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
#Samuel Wolfe
#October 7, 2023
#MSBA 207
#Chapter 10b
library(glmnet)
train_X <- read.csv('ebay_train_X.csv')
train_y <- read.csv('ebay_train_y.csv')
valid_X <- read.csv('ebay_valid_X.csv')
valid_y <- read.csv('ebay_valid_y.csv')
train.df <- cbind(train_X,train_y)
valid.df <- cbind(valid_X,valid_y)
set.seed(123)
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data = train.df, family = "binomial")
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
round(data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit))), 5)
y <- train.df$Competitive
# creating a matrix with predictors
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
# lasso L1
# Find the best lambda using cross-validation
cv.lasso <- cv.glmnet(X, y, alpha = 1, family = "binomial")
# Fit the final model on the training data
model <- glmnet(X, y, alpha = 1, family = "binomial",
lambda = cv.lasso$lambda.min)
# Display regression coefficients
coef(model)
View(valid.df)
train.df <- subset(train.df,select=-c('ClosePrice'))
train.df <- subset(train.df,select=-c(ClosePrice))
View(train.df)
valid.df <- subset(valid.df,select=-c(ClosePrice))
#Samuel Wolfe
#October 7, 2023
#MSBA 207
#Chapter 10b
library(glmnet)
train_X <- read.csv('ebay_train_X.csv')
train_y <- read.csv('ebay_train_y.csv')
valid_X <- read.csv('ebay_valid_X.csv')
valid_y <- read.csv('ebay_valid_y.csv')
train.df <- cbind(train_X,train_y)
valid.df <- cbind(valid_X,valid_y)
train.df <- subset(train.df,select=-c(ClosePrice))
valid.df <- subset(valid.df,select=-c(ClosePrice))
set.seed(123)
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data = train.df, family = "binomial")
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
round(data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit))), 5)
y <- train.df$Competitive
# creating a matrix with predictors
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
# lasso L1
# Find the best lambda using cross-validation
cv.lasso <- cv.glmnet(X, y, alpha = 1, family = "binomial")
# Fit the final model on the training data
model <- glmnet(X, y, alpha = 1, family = "binomial",
lambda = cv.lasso$lambda.min)
# Display regression coefficients
coef(model)
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
round(data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit))), 5)
#Samuel Wolfe
#October 7, 2023
#MSBA 207
#Chapter 10b
library(glmnet)
train_X <- read.csv('ebay_train_X.csv')
train_y <- read.csv('ebay_train_y.csv')
valid_X <- read.csv('ebay_valid_X.csv')
valid_y <- read.csv('ebay_valid_y.csv')
train.df <- cbind(train_X,train_y)
valid.df <- cbind(valid_X,valid_y)
train.df <- subset(train.df,select=-c(ClosePrice))
valid.df <- subset(valid.df,select=-c(ClosePrice))
set.seed(123)
# run logistic model, and show coefficients and odds
lm.fit <- glm(Competitive ~ ., data = train.df, family = "binomial")
data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit)))
round(data.frame(summary(lm.fit)$coefficients, odds = exp(coef(lm.fit))), 5)
y <- train.df$Competitive
# creating a matrix with predictors
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
# lasso L1
# Find the best lambda using cross-validation
cv.lasso <- cv.glmnet(X, y, alpha = 1, family = "binomial")
# Fit the final model on the training data
model <- glmnet(X, y, alpha = 1, family = "binomial",
lambda = cv.lasso$lambda.min)
# Display regression coefficients
coef(model)
# run logistic model, and show coefficients and odds
model_logit <- glm(Competitive ~ ., data=train.df, family = "binomial")
summary(model_logit)
# run logistic model, and show coefficients and odds
model_logit <- glm(Competitive ~ ., data=train.df, family = "binomial")
summary(model_logit)
y <- train.df$Competitive
# creating a matrix with predictors
X <- model.matrix(Competitive ~ ., train.df)[, -1] #remove intercept as glmnet will add intercept
# modelL1 <- glmnet(X, y, family = "binomial", alpha = 1, lambda = NULL)
# coef(modelL1)
# lasso L1
# Find the best lambda using cross-validation
set.seed(123)
cv.lasso <- cv.glmnet(X, y, alpha = 1, family = "binomial")
# Fit the final model on the training data
model <- glmnet(X, y, alpha = 1, family = "binomial",
lambda = cv.lasso$lambda.min)
# Display regression coefficients
coef(model)
# lasso L1
# Find the best lambda using cross-validation
set.seed(123)
cv.lasso <- cv.glmnet(X, y, alpha = 1, family = "binomial")
# Fit the final model on the training data
model <- glmnet(X, y, alpha = 1, family = "binomial",
lambda = cv.lasso$lambda.min)
# Display regression coefficients
coef(model)
a <- seq(0.1, 0.9, 0.05)
library(foreach)
search <- foreach(i = a, .combine = rbind) %dopar% {
cv <- cv.glmnet(X, y, family = "binomial", nfold = 10, type.measure = "deviance", paralle = FALSE,
alpha = i)
data.frame(cvm = cv$cvm[cv$lambda == cv$lambda.1se], lambda.1se = cv$lambda.1se, alpha = i)
}
cv3 <- search[search$cvm == min(search$cvm), ]
cv3
cv3
md3 <- glmnet(X, y, family = "binomial", lambda = cv3$lambda.1se, alpha = cv3$alpha)
coef(md3)
